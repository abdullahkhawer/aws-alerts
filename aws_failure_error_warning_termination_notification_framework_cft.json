{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to deploy the Failure, Error, Warning and Termination Notification Framework. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "FailureErrorWarningTerminationNotificationSNSTopicEmail": {
      "Description": "Email Address for AWS Failure, Error, Warning and Termination Notification SNS Topic.",
      "Type": "String",
      "AllowedPattern": "/[^\\s@]+@[^\\s@]+\\.[^\\s@]+/"
    },
    "EnableCloudFormationFailureNotification": {
      "Description": "Option to Enable AWS CloudFormation Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "CloudFormationFailureLambdaCodeS3Bucket": {
      "Description": "AWS S3 Bucket Name having AWS CloudFormation Failure Notification AWS Lambda Function Code.",
      "Type": "String",
      "Default": ""
    },
    "CloudFormationFailureLambdaCodeS3BucketKey": {
      "Description": "AWS S3 Bucket Key having AWS CloudFormation Failure Notification AWS Lambda Function Code.",
      "Type": "String",
      "Default": ""
    },
    "EnableLambdaFailureNotification": {
      "Description": "Option to Enable AWS Lambda Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableDMSFailureWarningNotification": {
      "Description": "Option to Enable AWS DMS Failure and Warning Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableRDSFailureWarningNotification": {
      "Description": "Option to Enable AWS RDS Failure and Warning Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableCodeBuildFailureNotification": {
      "Description": "Option to Enable AWS CodeBuild Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableEC2AutoScalingFailureNotification": {
      "Description": "Option to Enable AWS EC2 Auto Scaling Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableBatchFailureNotification": {
      "Description": "Option to Enable AWS Batch Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableCodeDeployFailureNotification": {
      "Description": "Option to Enable AWS CodeDeploy Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableCodePipelineFailureNotification": {
      "Description": "Option to Enable AWS CodePipeline Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableConfigFailureNotification": {
      "Description": "Option to Enable AWS Config Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableEBSFailureNotification": {
      "Description": "Option to Enable AWS EBS Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableGlueFailureNotification": {
      "Description": "Option to Enable AWS Glue Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableEMRFailureNotification": {
      "Description": "Option to Enable AWS EMR Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableEMRErrorNotification": {
      "Description": "Option to Enable AWS EMR Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableECSInstanceTerminationNotification": {
      "Description": "Option to Enable AWS ECS Instance Termination Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableECSTaskTerminationNotification": {
      "Description": "Option to Enable AWS ECS Task Termination Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableEC2InstanceTerminationNotification": {
      "Description": "Option to Enable AWS EC2 Instance Termination Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableEC2SpotInstanceErrorNotification": {
      "Description": "Option to Enable AWS EC2 Spot Instance Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableTrustedAdvisorErrorWarningNotification": {
      "Description": "Option to Enable AWS Trusted Advisor Error and Warning Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableHealthErrorNotification": {
      "Description": "Option to Enable AWS Health Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSMSFailureNotification": {
      "Description": "Option to Enable AWS Server Migration Service Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableStepFunctionsFailureNotification": {
      "Description": "Option to Enable AWS Step Functions Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSSMMaintainanceWindowFailureNotification": {
      "Description": "Option to Enable AWS SSM Maintainance Window Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSSMEC2FailureNotification": {
      "Description": "Option to Enable AWS SSM EC2 State Manager, Run Command and Automation Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSSMComplianceWarningNotification": {
      "Description": "Option to Enable AWS SSM Compliance Warning Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableOpsWorksFailureNotification": {
      "Description": "Option to Enable AWS OpsWorks Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableOpsWorksErrorNotification": {
      "Description": "Option to Enable AWS OpsWorks Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableKMSKeyExpirationWarningNotification": {
      "Description": "Option to Enable AWS KMS Key Expiration Warning Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableMacieWarningNotification": {
      "Description": "Option to Enable AWS Macie Warning Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableGameLiftFailureNotification": {
      "Description": "Option to Enable AWS GameLift Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableTranscribeFailureNotification": {
      "Description": "Option to Enable AWS Transcribe Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSignerFailureNotification": {
      "Description": "Option to Enable AWS Signer Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableDataSyncErrorWarningNotification": {
      "Description": "Option to Enable AWS DataSync Error and Warning Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableIoTAnalyticsFailureNotification": {
      "Description": "Option to Enable AWS IoT Analytics Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableDataLifecycleManagerErrorNotification": {
      "Description": "Option to Enable AWS Data Lifecycle Manager Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableElementalMediaPackageErrorNotification": {
      "Description": "Option to Enable AWS Elemental MediaPackage Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableElementalMediaLiveErrorNotification": {
      "Description": "Option to Enable AWS Elemental MediaLive Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableElementalMediaConvertErrorNotification": {
      "Description": "Option to Enable AWS Elemental MediaConvert Error Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSageMakerHyperParameterTuningFailureNotification": {
      "Description": "Option to Enable AWS SageMaker HyperParameter Tuning Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSageMakerTransformFailureNotification": {
      "Description": "Option to Enable AWS SageMaker Transform Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    },
    "EnableSageMakerTrainingFailureNotification": {
      "Description": "Option to Enable AWS SageMaker Training Failure Notification.",
      "Type": "String",
      "Default": "NO",
      "AllowedValues": ["YES", "NO"],
      "ConstraintDescription": "Select 'YES' or 'NO'"
    }
  },
  "Conditions": {
    "CreateCloudFormationFailureResources": {
      "Fn::Equals": [
        { "Ref": "EnableCloudFormationFailureNotification" },
        "YES"
      ]
    },
    "CreateLambdaFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableLambdaFailureNotification" }, "YES"]
    },
    "CreateDMSFailureWarningResources": {
      "Fn::Equals": [{ "Ref": "EnableDMSFailureWarningNotification" }, "YES"]
    },
    "CreateRDSFailureWarningResources": {
      "Fn::Equals": [{ "Ref": "EnableRDSFailureWarningNotification" }, "YES"]
    },
    "CreateCBFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableCodeBuildFailureNotification" }, "YES"]
    },
    "CreateEC2AutoScalingFailureResources": {
      "Fn::Equals": [
        { "Ref": "EnableEC2AutoScalingFailureNotification" },
        "YES"
      ]
    },
    "CreateBatchFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableBatchFailureNotification" }, "YES"]
    },
    "CreateCodeDeployFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableCodeDeployFailureNotification" }, "YES"]
    },
    "CreateCodePipelineFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableCodePipelineFailureNotification" }, "YES"]
    },
    "CreateConfigFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableConfigFailureNotification" }, "YES"]
    },
    "CreateEBSFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableEBSFailureNotification" }, "YES"]
    },
    "CreateGlueFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableGlueFailureNotification" }, "YES"]
    },
    "CreateEMRFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableEMRFailureNotification" }, "YES"]
    },
    "CreateEMRErrorResources": {
      "Fn::Equals": [{ "Ref": "EnableEMRErrorNotification" }, "YES"]
    },
    "CreateECSInstanceTerminationResources": {
      "Fn::Equals": [
        { "Ref": "EnableECSInstanceTerminationNotification" },
        "YES"
      ]
    },
    "CreateECSTaskTerminationResources": {
      "Fn::Equals": [{ "Ref": "EnableECSTaskTerminationNotification" }, "YES"]
    },
    "CreateEC2InstanceTerminationResources": {
      "Fn::Equals": [
        { "Ref": "EnableEC2InstanceTerminationNotification" },
        "YES"
      ]
    },
    "CreateEC2SpotInstanceErrorResources": {
      "Fn::Equals": [{ "Ref": "EnableEC2SpotInstanceErrorNotification" }, "YES"]
    },
    "CreateTrustedAdvisorErrorWarningResources": {
      "Fn::Equals": [
        { "Ref": "EnableTrustedAdvisorErrorWarningNotification" },
        "YES"
      ]
    },
    "CreateHealthErrorResources": {
      "Fn::Equals": [{ "Ref": "EnableHealthErrorNotification" }, "YES"]
    },
    "CreateSMSFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableSMSFailureNotification" }, "YES"]
    },
    "CreateStepFunctionsFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableStepFunctionsFailureNotification" }, "YES"]
    },
    "CreateSSMMaintainanceWindowFailureResources": {
      "Fn::Equals": [
        { "Ref": "EnableSSMMaintainanceWindowFailureNotification" },
        "YES"
      ]
    },
    "CreateSSMEC2FailureResources": {
      "Fn::Equals": [{ "Ref": "EnableSSMEC2FailureNotification" }, "YES"]
    },
    "CreateSSMComplianceWarningResources": {
      "Fn::Equals": [{ "Ref": "EnableSSMComplianceWarningNotification" }, "YES"]
    },
    "CreateOpsWorksFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableOpsWorksFailureNotification" }, "YES"]
    },
    "CreateOpsWorksErrorResources": {
      "Fn::Equals": [{ "Ref": "EnableOpsWorksErrorNotification" }, "YES"]
    },
    "CreateKMSKeyExpirationWarningResources": {
      "Fn::Equals": [
        { "Ref": "EnableKMSKeyExpirationWarningNotification" },
        "YES"
      ]
    },
    "CreateMacieWarningResources": {
      "Fn::Equals": [{ "Ref": "EnableMacieWarningNotification" }, "YES"]
    },
    "CreateGameLiftFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableGameLiftFailureNotification" }, "YES"]
    },
    "CreateTranscribeFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableTranscribeFailureNotification" }, "YES"]
    },
    "CreateSignerFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableSignerFailureNotification" }, "YES"]
    },
    "CreateDataSyncErrorWarningResources": {
      "Fn::Equals": [{ "Ref": "EnableDataSyncErrorWarningNotification" }, "YES"]
    },
    "CreateIoTAnalyticsFailureResources": {
      "Fn::Equals": [{ "Ref": "EnableIoTAnalyticsFailureNotification" }, "YES"]
    },
    "CreateDataLifecycleManagerErrorResources": {
      "Fn::Equals": [
        { "Ref": "EnableDataLifecycleManagerErrorNotification" },
        "YES"
      ]
    },
    "CreateElementalMediaPackageErrorResources": {
      "Fn::Equals": [
        { "Ref": "EnableElementalMediaPackageErrorNotification" },
        "YES"
      ]
    },
    "CreateElementalMediaLiveErrorResources": {
      "Fn::Equals": [
        { "Ref": "EnableElementalMediaLiveErrorNotification" },
        "YES"
      ]
    },
    "CreateElementalMediaConvertErrorResources": {
      "Fn::Equals": [
        { "Ref": "EnableElementalMediaConvertErrorNotification" },
        "YES"
      ]
    },
    "CreateSageMakerHyperParameterTuningFailureResources": {
      "Fn::Equals": [
        { "Ref": "EnableSageMakerHyperParameterTuningFailureNotification" },
        "YES"
      ]
    },
    "CreateSageMakerTransformFailureResources": {
      "Fn::Equals": [
        { "Ref": "EnableSageMakerTransformFailureNotification" },
        "YES"
      ]
    },
    "CreateSageMakerTrainingFailureResources": {
      "Fn::Equals": [
        { "Ref": "EnableSageMakerTrainingFailureNotification" },
        "YES"
      ]
    }
  },
  "Resources": {
    "FailureNotificationSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "failure-error-warning-termination-notification-sns-topic",
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "FailureErrorWarningTerminationNotificationSNSTopicEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "CloudFormationFailureLambdaIAMRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "CreateCloudFormationFailureResources",
      "Properties": {
        "RoleName": "cf-failure-lambda-iam-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudFormationFailureLambdaFunctionIAMPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish",
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CloudFormationFailureLambdaFunction": {
      "DependsOn": [
        "CloudFormationFailureLambdaIAMRole",
        "FailureNotificationSNSTopic"
      ],
      "Type": "AWS::Lambda::Function",
      "Condition": "CreateCloudFormationFailureResources",
      "Properties": {
        "FunctionName": "cf-failure-lambda-function",
        "Description": "Lambda Function based on Python 3.7 to Send Notification on SNS regarding CloudFormation Stacks Failures.",
        "Environment": {
          "Variables": {
            "FAILURE_SNS_TOPIC_ARN": {
              "Fn::GetAtt": {
                "Ref": "FailureNotificationSNSTopic"
              }
            }
          }
        },
        "Code": {
          "S3Bucket": {
            "Ref": "CloudFormationFailureLambdaCodeS3Bucket"
          },
          "S3Key": {
            "Ref": "CloudFormationFailureLambdaCodeS3BucketKey"
          }
        },
        "Handler": "aws_cloudformation_failure_notification.lambda_handler",
        "Role": {
          "Fn::GetAtt": ["CloudFormationFailureLambdaIAMRole", "Arn"]
        },
        "Runtime": "python3.7",
        "Timeout": "60",
        "MemorySize": 128,
        "Tags": [
          {
            "Key": "Name",
            "Value": "cf-failure-lambda-function"
          }
        ]
      }
    },
    "CFNotificationSNSTopic": {
      "DependsOn": ["CloudFormationFailureLambdaFunction"],
      "Type": "AWS::SNS::Topic",
      "Condition": "CreateCloudFormationFailureResources",
      "Properties": {
        "TopicName": "cf-notification-SNS-topic",
        "DisplayName": "CFNotificationSNSTopic",
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": ["CloudFormationFailureLambdaFunction", "Arn"]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "CloudFormationFailureLambdaInvokePermission": {
      "DependsOn": [
        "CloudFormationFailureLambdaFunction",
        "CFNotificationSNSTopic"
      ],
      "Type": "AWS::Lambda::Permission",
      "Condition": "CreateCloudFormationFailureResources",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["CloudFormationFailureLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": {
            "Ref": "CFNotificationSNSTopic"
          }
        }
      }
    },
    "LambdaFailureCloudWatchAlarm": {
      "DependsOn": ["FailureNotificationSNSTopic"],
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "CreateLambdaFailureResources",
      "Properties": {
        "AlarmName": "lambda-function-failure-cloudwatch-alarm",
        "AlarmDescription": "CloudWatch Alarm to Send Notification on SNS regarding Lambda Function Failures.",
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Dimensions": [],
        "DatapointsToAlarm": 1,
        "Statistic": "Minimum",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0.0,
        "Period": 60,
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "FailureNotificationSNSTopic"
          }
        ]
      }
    },
    "DMSInstanceFailureEvent": {
      "DependsOn": ["FailureNotificationSNSTopic"],
      "Type": "AWS::DMS::EventSubscription",
      "Condition": "CreateDMSFailureWarningResources",
      "Properties": {
        "SubscriptionName": "dms-instance-failure-warning-event",
        "EventCategories": ["Failure", "LowStorage", "Failover"],
        "SnsTopicArn": {
          "Ref": "FailureNotificationSNSTopic"
        },
        "SourceType": "replication-instance",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dms-instance-failure-event"
          }
        ]
      }
    },
    "DMSTaskFailureEvent": {
      "DependsOn": ["FailureNotificationSNSTopic"],
      "Type": "AWS::DMS::EventSubscription",
      "Condition": "CreateDMSFailureWarningResources",
      "Properties": {
        "SubscriptionName": "dms-task-failure-event",
        "EventCategories": ["Failure"],
        "SnsTopicArn": {
          "Ref": "FailureNotificationSNSTopic"
        },
        "SourceType": "replication-task",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dms-task-failure-event"
          }
        ]
      }
    },
    "RDSInstanceFailureEvent": {
      "DependsOn": ["FailureNotificationSNSTopic"],
      "Type": "AWS::RDS::EventSubscription",
      "Condition": "CreateRDSFailureWarningResources",
      "Properties": {
        "EventCategories": [
          "failure",
          "low storage",
          "failover",
          "availability",
          "notification",
          "read replica"
        ],
        "SnsTopicArn": {
          "Ref": "FailureNotificationSNSTopic"
        },
        "SourceType": "db-instance"
      }
    },
    "RDSSecurityGroupFailureEvent": {
      "DependsOn": ["FailureNotificationSNSTopic"],
      "Type": "AWS::RDS::EventSubscription",
      "Condition": "CreateRDSFailureWarningResources",
      "Properties": {
        "EventCategories": ["failure"],
        "SnsTopicArn": {
          "Ref": "FailureNotificationSNSTopic"
        },
        "SourceType": "db-security-group"
      }
    },
    "RDSSnapshotFailureEvent": {
      "DependsOn": ["FailureNotificationSNSTopic"],
      "Type": "AWS::RDS::EventSubscription",
      "Condition": "CreateRDSFailureWarningResources",
      "Properties": {
        "EventCategories": ["notification"],
        "SnsTopicArn": {
          "Ref": "FailureNotificationSNSTopic"
        },
        "SourceType": "db-snapshot"
      }
    },
    "RDSClusterFailureEvent": {
      "DependsOn": ["FailureNotificationSNSTopic"],
      "Type": "AWS::RDS::EventSubscription",
      "Condition": "CreateRDSFailureWarningResources",
      "Properties": {
        "EventCategories": ["failure", "failover", "notification"],
        "SnsTopicArn": {
          "Ref": "FailureNotificationSNSTopic"
        },
        "SourceType": "db-cluster"
      }
    },
    "CBFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateCBFailureResources",
      "Properties": {
        "Name": "cb-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS CodeBuild Failures.",
        "EventPattern": {
          "source": ["aws.codebuild"],
          "detail-type": ["CodeBuild Build State Change"],
          "detail": {
            "build-status": ["FAILED"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS CodeBuild\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "EC2AutoScalingFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateEC2AutoScalingFailureResources",
      "Properties": {
        "Name": "ec2-autoscaling-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS EC2 Auto Scaling Failures.",
        "EventPattern": {
          "source": ["aws.autoscaling"],
          "detail-type": [
            "EC2 Instance Launch Unsuccessful",
            "EC2 Instance Terminate Unsuccessful"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS EC2 Auto Scaling\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "BatchFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateBatchFailureResources",
      "Properties": {
        "Name": "batch-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Batch Failures.",
        "EventPattern": {
          "source": ["aws.batch"],
          "detail-type": ["Batch Job State Change"],
          "detail": {
            "status": ["FAILED"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Batch\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "CodeDeployFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateCodeDeployFailureResources",
      "Properties": {
        "Name": "codedeploy-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS CodeDeploy Failures.",
        "EventPattern": {
          "source": ["aws.codedeploy"],
          "detail-type": [
            "CodeDeploy Deployment State-change Notification",
            "CodeDeploy Instance State-change Notification"
          ],
          "detail": {
            "state": ["FAILURE"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS CodeDeploy\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "CodePipelineFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateCodePipelineFailureResources",
      "Properties": {
        "Name": "codepipeline-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS CodePipeline Failures.",
        "EventPattern": {
          "source": ["aws.codepipeline"],
          "detail-type": ["CodePipeline Pipeline Execution State Change"],
          "detail": {
            "state": ["CANCELED", "FAILED"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS CodePipeline\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "ConfigFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateConfigFailureResources",
      "Properties": {
        "Name": "config-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Config Failures.",
        "EventPattern": {
          "source": ["aws.config"],
          "detail-type": ["Config Configuration Snapshot Delivery Status"],
          "detail": {
            "messageType": ["ConfigurationSnapshotDeliveryFailed"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Config\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "EBSFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateEBSFailureResources",
      "Properties": {
        "Name": "ebs-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS EBS Failures.",
        "EventPattern": {
          "source": ["aws.ec2"],
          "detail-type": [
            "EBS Snapshot Notification",
            "EBS Multi-Volume Snapshots Completion Status",
            "EBS Volume Notification"
          ],
          "detail": {
            "event": [
              "createSnapshot",
              "createSnapshots",
              "copySnapshot",
              "createVolume",
              "attachVolume",
              "modifyVolume",
              "reattachVolume"
            ],
            "result": ["failed"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS EBS\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "GlueFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateGlueFailureResources",
      "Properties": {
        "Name": "glue-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Glue Failures.",
        "EventPattern": {
          "source": ["aws.glue"],
          "detail-type": ["Glue Crawler State Change", "Glue Job State Change"],
          "detail": {
            "state": ["FAILED", "TIMEOUT"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Glue\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "EMRFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateEMRFailureResources",
      "Properties": {
        "Name": "emr-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS EMR Failures.",
        "EventPattern": {
          "source": ["aws.emr"],
          "detail-type": [
            "EMR Instance Fleet State Change",
            "EMR Auto Scaling Policy State Change",
            "EMR Cluster State Change",
            "EMR Step Status Change"
          ],
          "detail": {
            "state": [
              "SUSPENDED",
              "FAILED",
              "TERMINATED",
              "TERMINATED_WITH_ERRORS",
              "CANCELLED"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS EMR\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "EMRErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateEMRErrorResources",
      "Properties": {
        "Name": "emr-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS EMR Errors.",
        "EventPattern": {
          "source": ["aws.emr"],
          "detail-type": ["EMR Configuration Error"]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS EMR\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "ECSInstanceTerminationCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateECSInstanceTerminationResources",
      "Properties": {
        "Name": "ecs-instance-termination-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS ECS Instance Terminations.",
        "EventPattern": {
          "source": ["aws.ecs"],
          "detail-type": ["ECS Container Instance State Change"],
          "detail": {
            "status": ["STOPPED"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS ECS\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: TERMINATION\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "ECSTaskTerminationCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateECSTaskTerminationResources",
      "Properties": {
        "Name": "ecs-task-termination-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS ECS Task Terminations.",
        "EventPattern": {
          "source": ["aws.ecs"],
          "detail-type": ["ECS Container Instance State Change"],
          "detail": {
            "status": ["STOPPED"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS ECS\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: TERMINATION\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "EC2InstanceTerminationCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateEC2InstanceTerminationResources",
      "Properties": {
        "Name": "ec2-instance-termination-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS EC2 Instance Terminations.",
        "EventPattern": {
          "source": ["aws.ec2"],
          "detail-type": ["EC2 Instance State-change Notification"],
          "detail": {
            "state": ["stopping", "shutting-down"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS EC2\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: TERMINATION\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "EC2SpotInstanceErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateEC2SpotInstanceErrorResources",
      "Properties": {
        "Name": "ec2-spot-instance-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS EC2 Spot Instance Errors.",
        "EventPattern": {
          "source": ["aws.ec2"],
          "detail-type": ["EC2 Spot Instance Interruption Warning"]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS EC2\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "TrustedAdvisorErrorWarningCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateTrustedAdvisorErrorWarningResources",
      "Properties": {
        "Name": "trusted-advisor-error-warning-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Trusted Advisor Errors and Warnings.",
        "EventPattern": {
          "source": ["aws.trustedadvisor"],
          "detail-type": ["Trusted Advisor Check Item Refresh Notification"],
          "detail": {
            "status": ["ERROR", "WARN"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Trusted Advisor\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR or WARNING\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "HealthErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateHealthErrorResources",
      "Properties": {
        "Name": "health-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Health Errors.",
        "EventPattern": {
          "source": ["aws.health"],
          "detail-type": ["AWS Health Event", "AWS Health Abuse Event"],
          "detail": {
            "eventTypeCategory": ["issue"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Health\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SMSFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSMSFailureResources",
      "Properties": {
        "Name": "sms-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS SMS Failures.",
        "EventPattern": {
          "source": ["aws.sms"],
          "detail-type": ["Server Migration Job State Change"],
          "detail": {
            "state": ["Failed"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Server Migration Service (SMS)\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "StepFunctionsFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateStepFunctionsFailureResources",
      "Properties": {
        "Name": "step-functions-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Step Functions Failures.",
        "EventPattern": {
          "source": ["aws.states"],
          "detail-type": ["Step Functions Execution Status Change"],
          "detail": {
            "status": ["ABORTED", "FAILED", "TIMED_OUT"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Step Functions\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SSMMaintainanceWindowFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSSMMaintainanceWindowFailureResources",
      "Properties": {
        "Name": "ssm-maintainance-window-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS SSM Maintainance Window Failures.",
        "EventPattern": {
          "source": ["aws.ssm"],
          "detail-type": [
            "Maintenance Window Execution State-change Notification",
            "Maintenance Window Task Execution State-change Notification",
            "Maintenance Window Task Target Invocation State-change Notification"
          ],
          "detail": {
            "status": ["CANCELLED", "FAILED", "TIMED_OUT"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS SSM Maintainance Window\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SSMEC2FailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSSMEC2FailureResources",
      "Properties": {
        "Name": "ssm-ec2-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS SSM EC2 State Manager, Run Command and Automation Failures.",
        "EventPattern": {
          "source": ["aws.ssm"],
          "detail-type": [
            "EC2 State Manager Association State Change",
            "EC2 State Manager Instance Association State Change",
            "EC2 Command Status-change Notification",
            "EC2 Command Invocation Status-change Notification",
            "EC2 Automation Step Status-change Notification",
            "EC2 Automation Execution Status-change Notification"
          ],
          "detail": {
            "status": ["Failed", "Cancelled", "TimedOut"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS SSM EC2\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SSMComplianceWarningCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSSMComplianceWarningResources",
      "Properties": {
        "Name": "ssm-compliance-warning-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS SSM Compliance Warnings.",
        "EventPattern": {
          "source": ["aws.ssm"],
          "detail-type": ["Configuration Compliance State Change"],
          "detail": {
            "compliance-status": ["non_compliant"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS SSM Compliance\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: WARNING\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "OpsWorksFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateOpsWorksFailureResources",
      "Properties": {
        "Name": "opsworks-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS OpsWorks Failures.",
        "EventPattern": {
          "source": ["aws.opsworks"],
          "detail-type": [
            "OpsWorks Command State Change",
            "OpsWorks Instance State Change",
            "OpsWorks Deployment State Change"
          ],
          "detail": {
            "status": [
              "expired",
              "failed",
              "skipped",
              "connection_lost",
              "setup_failed",
              "shutting_down",
              "start_failed",
              "stop_failed",
              "stopped",
              "terminated"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS OpsWorks\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "OpsWorksErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateOpsWorksErrorResources",
      "Properties": {
        "Name": "opsworks-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS OpsWorks Errors.",
        "EventPattern": {
          "source": ["aws.opsworks"],
          "detail-type": ["OpsWorks Alert"]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS OpsWorks\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "KMSKeyExpirationWarningCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateKMSKeyExpirationWarningResources",
      "Properties": {
        "Name": "kms-key-expiration-warning-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS KMS Key Expiration Warnings.",
        "EventPattern": {
          "source": ["aws.kms"],
          "detail-type": ["KMS Imported Key Material Expiration"]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS KMS\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: WARNING\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "MacieWarningCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateMacieWarningResources",
      "Properties": {
        "Name": "macie-warning-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Macie Warnings.",
        "EventPattern": {
          "source": ["aws.macie"],
          "detail-type": ["Macie Alert"]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Macie\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: WARNING\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "GameLiftFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateGameLiftFailureResources",
      "Properties": {
        "Name": "gamelift-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS GameLift Failures.",
        "EventPattern": {
          "source": ["aws.gamelift"],
          "detail-type": ["GameLift Matchmaking Event"],
          "detail": {
            "type": [
              "MatchmakingTimedOut",
              "MatchmakingCancelled",
              "MatchmakingFailed"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS GameLift\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "TranscribeFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateTranscribeFailureResources",
      "Properties": {
        "Name": "transcribe-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Transcribe Failures.",
        "EventPattern": {
          "source": ["aws.transcribe"],
          "detail-type": ["Transcribe Job State Change"],
          "detail": {
            "TranscriptionJobStatus": ["FAILED"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Transcribe\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SignerFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSignerFailureResources",
      "Properties": {
        "Name": "signer-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Signer Failures.",
        "EventPattern": {
          "source": ["aws.signer"],
          "detail-type": ["Signer Job Status Change"],
          "detail": {
            "status": ["Failed"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Signer\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "DataSyncErrorWarningCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateDataSyncErrorWarningResources",
      "Properties": {
        "Name": "datasync-error-warning-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS DataSync Errors and Warnings.",
        "EventPattern": {
          "source": ["aws.datasync"],
          "detail-type": [
            "DataSync Task Execution State Change",
            "DataSync Task State Change",
            "DataSync Agent State Change"
          ],
          "detail": {
            "State": ["ERROR", "UNAVAILABLE", "OFFLINE"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS DataSync\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR or WARNING\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "IoTAnalyticsFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateIoTAnalyticsFailureResources",
      "Properties": {
        "Name": "iot-analytics-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS IoT Analytics Failures.",
        "EventPattern": {
          "source": ["aws.iotanalytics"],
          "detail-type": ["IoT Analytics Dataset Lifecycle Notification"],
          "detail": {
            "state": ["CONTENT_DELIVERY_FAILED"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS IoT Analytics\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "DataLifecycleManagerErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateDataLifecycleManagerErrorResources",
      "Properties": {
        "Name": "data-lifecycle-manager-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Data Lifecycle Manager Errors.",
        "EventPattern": {
          "source": ["aws.dlm"],
          "detail-type": ["DLM Policy State Change"],
          "detail": {
            "state": ["ERROR"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Data Lifecycle Manager\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "ElementalMediaPackageErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateElementalMediaPackageErrorResources",
      "Properties": {
        "Name": "elemental-mediapackage-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Elemental MediaPackage Errors.",
        "EventPattern": {
          "source": ["aws.mediapackage"],
          "detail-type": [
            "MediaPackage Input Notification",
            "MediaPackage Key Provider Notification"
          ],
          "detail": {
            "event": [
              "MaxIngestStreamsError",
              "IngestError",
              "KeyProviderError"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Elemental MediaPackage\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "ElementalMediaLiveErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateElementalMediaLiveErrorResources",
      "Properties": {
        "Name": "elemental-medialive-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Elemental MediaLive Errors.",
        "EventPattern": {
          "source": ["aws.medialive"],
          "detail-type": ["MediaLive Channel Alert"]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Elemental MediaLive\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "ElementalMediaConvertErrorCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateElementalMediaConvertErrorResources",
      "Properties": {
        "Name": "elemental-mediaconvert-error-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS Elemental MediaConvert Errors.",
        "EventPattern": {
          "source": ["aws.mediaconvert"],
          "detail-type": ["MediaConvert Job State Change"],
          "detail": {
            "status": ["ERROR"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS Elemental MediaConvert\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: ERROR\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SageMakerHyperParameterTuningFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSageMakerHyperParameterTuningFailureResources",
      "Properties": {
        "Name": "sagemaker-hyperparameter-tuning-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS SageMaker HyperParameter Tuning Failures.",
        "EventPattern": {
          "source": ["aws.sagemaker"],
          "detail-type": ["SageMaker HyperParameter Tuning Job State Change"],
          "detail": {
            "HyperParameterTuningJobStatus": ["Failed"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS SageMaker HyperParameter Tuning\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SageMakerTransformFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSageMakerTransformFailureResources",
      "Properties": {
        "Name": "sagemaker-transform-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS SageMaker Transform Failures.",
        "EventPattern": {
          "source": ["aws.sagemaker"],
          "detail-type": ["SageMaker Transform Job State Change"],
          "detail": {
            "TransformJobStatus": ["Failed"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS SageMaker Transform\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    },
    "SageMakerTrainingFailureCloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateSageMakerTrainingFailureResources",
      "Properties": {
        "Name": "sagemaker-training-failure-cloudwatch-event",
        "Description": "AWS CloudWatch Event to Send Notification on AWS SNS regarding AWS SageMaker Training Failures.",
        "EventPattern": {
          "source": ["aws.sagemaker"],
          "detail-type": ["SageMaker Training Job State Change"],
          "detail": {
            "TrainingJobStatus": ["Failed"]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "FailureNotificationSNSTopic"
            },
            "Id": "FailureNotificationSNSTopicTarget",
            "InputTransformer": {
              "InputPathsMap": {
                "detail": "$.detail",
                "detail-type": "$.detail-type",
                "resources": "$.resources",
                "time": "$.time",
                "region": "$.region",
                "account": "$.account"
              },
              "InputTemplate": "\"AWS Event Account ID: <account>\"\n\"AWS Event Region: <region>\"\n\"AWS Event Time: <time>\"\n\"AWS Event Service: AWS SageMaker Training\"\n\"AWS Event Name: <detail-type>\"\n\"AWS Event Type: FAILURE\"\n\"AWS Event Resource(s): <resources>\"\n\"AWS Event Details (minified json string): <detail>\""
            }
          }
        ]
      }
    }
  }
}
