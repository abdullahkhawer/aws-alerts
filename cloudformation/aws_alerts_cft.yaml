AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template to deploy the AWS Alerts solution for AWS cloud to monitor resources for various 30+ AWS services and send alerts for failures, errors, warnings and terminations on Slack.
Parameters:
  SlackWebhookURLAWSSSMParameterName:
    Description: >-
      Name of the AWS SSM Parameter Name from the Parameter Store which is having Slack Webhook URL.
    Type: String
  AWSAlertsLambdaCodeS3Bucket:
    Description: >-
      AWS S3 Bucket Name having AWS Alerts Lambda Function Code.
    Type: String
  AWSAlertsLambdaCodeS3ObjectKey:
    Description: >-
      AWS S3 Bucket Object Key having AWS Alerts Lambda Function Code.
    Type: String
  EnableLambdaFailureAlerts:
    Description: Option to Enable AWS Lambda Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableDMSFailureWarningAlerts:
    Description: Option to Enable AWS DMS Failure and Warning Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableRDSFailureWarningAlerts:
    Description: Option to Enable AWS RDS Failure and Warning Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableRedshiftErrorAlerts:
    Description: Option to Enable AWS Redshift Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableCodeBuildFailureAlerts:
    Description: Option to Enable AWS CodeBuild Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableEC2AutoScalingFailureAlerts:
    Description: Option to Enable AWS EC2 Auto Scaling Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableBatchFailureAlerts:
    Description: Option to Enable AWS Batch Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableCodeDeployFailureAlerts:
    Description: Option to Enable AWS CodeDeploy Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableCodePipelineFailureAlerts:
    Description: Option to Enable AWS CodePipeline Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableConfigFailureAlerts:
    Description: Option to Enable AWS Config Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableEBSFailureAlerts:
    Description: Option to Enable AWS EBS Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableGlueFailureAlerts:
    Description: Option to Enable AWS Glue Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableEMRFailureAlerts:
    Description: Option to Enable AWS EMR Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableEMRErrorAlerts:
    Description: Option to Enable AWS EMR Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableECSInstanceTerminationAlerts:
    Description: Option to Enable AWS ECS Instance Termination Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableECSTaskTerminationAlerts:
    Description: Option to Enable AWS ECS Task Termination Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableEC2InstanceTerminationAlerts:
    Description: Option to Enable AWS EC2 Instance Termination Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableEC2SpotInstanceErrorAlerts:
    Description: Option to Enable AWS EC2 Spot Instance Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableTrustedAdvisorErrorWarningAlerts:
    Description: Option to Enable AWS Trusted Advisor Error and Warning Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableHealthErrorAlerts:
    Description: Option to Enable AWS Health Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSMSFailureAlerts:
    Description: Option to Enable AWS Server Migration Service Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableStepFunctionsFailureAlerts:
    Description: Option to Enable AWS Step Functions Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSSMMaintainanceWindowFailureAlerts:
    Description: Option to Enable AWS SSM Maintainance Window Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSSMEC2FailureAlerts:
    Description: >-
      Option to Enable AWS SSM EC2 State Manager, Run Command and Automation
      Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSSMComplianceWarningAlerts:
    Description: Option to Enable AWS SSM Compliance Warning Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableOpsWorksFailureAlerts:
    Description: Option to Enable AWS OpsWorks Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableOpsWorksErrorAlerts:
    Description: Option to Enable AWS OpsWorks Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableKMSKeyExpirationWarningAlerts:
    Description: Option to Enable AWS KMS Key Expiration Warning Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableMacieWarningAlerts:
    Description: Option to Enable AWS Macie Warning Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableGameLiftFailureAlerts:
    Description: Option to Enable AWS GameLift Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableTranscribeFailureAlerts:
    Description: Option to Enable AWS Transcribe Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSignerFailureAlerts:
    Description: Option to Enable AWS Signer Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableDataSyncErrorWarningAlerts:
    Description: Option to Enable AWS DataSync Error and Warning Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableIoTAnalyticsFailureAlerts:
    Description: Option to Enable AWS IoT Analytics Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableDataLifecycleManagerErrorAlerts:
    Description: Option to Enable AWS Data Lifecycle Manager Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableElementalMediaPackageErrorAlerts:
    Description: Option to Enable AWS Elemental MediaPackage Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableElementalMediaLiveErrorAlerts:
    Description: Option to Enable AWS Elemental MediaLive Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableElementalMediaConvertErrorAlerts:
    Description: Option to Enable AWS Elemental MediaConvert Error Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSageMakerHyperParameterTuningFailureAlerts:
    Description: Option to Enable AWS SageMaker HyperParameter Tuning Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSageMakerTransformFailureAlerts:
    Description: Option to Enable AWS SageMaker Transform Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
  EnableSageMakerTrainingFailureAlerts:
    Description: Option to Enable AWS SageMaker Training Failure Alerts.
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
    ConstraintDescription: Select 'YES' or 'NO'.
Conditions:
  CreateLambdaFailureResources: !Equals
    - !Ref EnableLambdaFailureAlerts
    - "YES"
  CreateDMSFailureWarningResources: !Equals
    - !Ref EnableDMSFailureWarningAlerts
    - "YES"
  CreateRDSFailureWarningResources: !Equals
    - !Ref EnableRDSFailureWarningAlerts
    - "YES"
  CreateRedshiftErrorResources: !Equals
    - !Ref EnableRedshiftErrorAlerts
    - "YES"
  CreateCBFailureResources: !Equals
    - !Ref EnableCodeBuildFailureAlerts
    - "YES"
  CreateEC2AutoScalingFailureResources: !Equals
    - !Ref EnableEC2AutoScalingFailureAlerts
    - "YES"
  CreateBatchFailureResources: !Equals
    - !Ref EnableBatchFailureAlerts
    - "YES"
  CreateCodeDeployFailureResources: !Equals
    - !Ref EnableCodeDeployFailureAlerts
    - "YES"
  CreateCodePipelineFailureResources: !Equals
    - !Ref EnableCodePipelineFailureAlerts
    - "YES"
  CreateConfigFailureResources: !Equals
    - !Ref EnableConfigFailureAlerts
    - "YES"
  CreateEBSFailureResources: !Equals
    - !Ref EnableEBSFailureAlerts
    - "YES"
  CreateGlueFailureResources: !Equals
    - !Ref EnableGlueFailureAlerts
    - "YES"
  CreateEMRFailureResources: !Equals
    - !Ref EnableEMRFailureAlerts
    - "YES"
  CreateEMRErrorResources: !Equals
    - !Ref EnableEMRErrorAlerts
    - "YES"
  CreateECSInstanceTerminationResources: !Equals
    - !Ref EnableECSInstanceTerminationAlerts
    - "YES"
  CreateECSTaskTerminationResources: !Equals
    - !Ref EnableECSTaskTerminationAlerts
    - "YES"
  CreateEC2InstanceTerminationResources: !Equals
    - !Ref EnableEC2InstanceTerminationAlerts
    - "YES"
  CreateEC2SpotInstanceErrorResources: !Equals
    - !Ref EnableEC2SpotInstanceErrorAlerts
    - "YES"
  CreateTrustedAdvisorErrorWarningResources: !Equals
    - !Ref EnableTrustedAdvisorErrorWarningAlerts
    - "YES"
  CreateHealthErrorResources: !Equals
    - !Ref EnableHealthErrorAlerts
    - "YES"
  CreateSMSFailureResources: !Equals
    - !Ref EnableSMSFailureAlerts
    - "YES"
  CreateStepFunctionsFailureResources: !Equals
    - !Ref EnableStepFunctionsFailureAlerts
    - "YES"
  CreateSSMMaintainanceWindowFailureResources: !Equals
    - !Ref EnableSSMMaintainanceWindowFailureAlerts
    - "YES"
  CreateSSMEC2FailureResources: !Equals
    - !Ref EnableSSMEC2FailureAlerts
    - "YES"
  CreateSSMComplianceWarningResources: !Equals
    - !Ref EnableSSMComplianceWarningAlerts
    - "YES"
  CreateOpsWorksFailureResources: !Equals
    - !Ref EnableOpsWorksFailureAlerts
    - "YES"
  CreateOpsWorksErrorResources: !Equals
    - !Ref EnableOpsWorksErrorAlerts
    - "YES"
  CreateKMSKeyExpirationWarningResources: !Equals
    - !Ref EnableKMSKeyExpirationWarningAlerts
    - "YES"
  CreateMacieWarningResources: !Equals
    - !Ref EnableMacieWarningAlerts
    - "YES"
  CreateGameLiftFailureResources: !Equals
    - !Ref EnableGameLiftFailureAlerts
    - "YES"
  CreateTranscribeFailureResources: !Equals
    - !Ref EnableTranscribeFailureAlerts
    - "YES"
  CreateSignerFailureResources: !Equals
    - !Ref EnableSignerFailureAlerts
    - "YES"
  CreateDataSyncErrorWarningResources: !Equals
    - !Ref EnableDataSyncErrorWarningAlerts
    - "YES"
  CreateIoTAnalyticsFailureResources: !Equals
    - !Ref EnableIoTAnalyticsFailureAlerts
    - "YES"
  CreateDataLifecycleManagerErrorResources: !Equals
    - !Ref EnableDataLifecycleManagerErrorAlerts
    - "YES"
  CreateElementalMediaPackageErrorResources: !Equals
    - !Ref EnableElementalMediaPackageErrorAlerts
    - "YES"
  CreateElementalMediaLiveErrorResources: !Equals
    - !Ref EnableElementalMediaLiveErrorAlerts
    - "YES"
  CreateElementalMediaConvertErrorResources: !Equals
    - !Ref EnableElementalMediaConvertErrorAlerts
    - "YES"
  CreateSageMakerHyperParameterTuningFailureResources: !Equals
    - !Ref EnableSageMakerHyperParameterTuningFailureAlerts
    - "YES"
  CreateSageMakerTransformFailureResources: !Equals
    - !Ref EnableSageMakerTransformFailureAlerts
    - "YES"
  CreateSageMakerTrainingFailureResources: !Equals
    - !Ref EnableSageMakerTrainingFailureAlerts
    - "YES"
Resources:
  AWSAlertsSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: aws-alerts-sns-topic
  AWSAlertsSNSTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    DependsOn:
      - AWSAlertsSNSTopic
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: Pid1
        Statement:
          - Sid: Sid1
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - "SNS:Publish"
              - "SNS:RemovePermission"
              - "SNS:SetTopicAttributes"
              - "SNS:DeleteTopic"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:GetTopicAttributes"
              - "SNS:Receive"
              - "SNS:AddPermission"
              - "SNS:Subscribe"
            Resource: !Ref AWSAlertsSNSTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref "AWS::AccountId"
          - Sid: Sid2
            Effect: Allow
            Principal:
              Service:
                - datapipeline.amazonaws.com
                - dms.amazonaws.com
                - events.amazonaws.com
                - lambda.amazonaws.com
                - cloudwatch.amazonaws.com
                - monitoring.rds.amazonaws.com
                - rds.amazonaws.com
                - s3.amazonaws.com
            Action:
              - "SNS:Publish"
            Resource: !Ref AWSAlertsSNSTopic
      Topics:
        - !Ref AWSAlertsSNSTopic
  AWSAlertsLambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: aws-alerts-lambda-iam-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AWSAlertsLambdaFunctionIAMPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                  - "ssm:DescribeParameters"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParametersByPath"
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SlackWebhookURLAWSSSMParameterName}"
  AWSAlertsLambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - AWSAlertsLambdaIAMRole
      - AWSAlertsSNSTopic
    Properties:
      FunctionName: aws-alerts-lambda-function
      Description: >-
        AWS Lambda function based on Python 3.12 to send alerts to AWS SNS.
      Environment:
        Variables:
          SLACK_WEBHOOK_URL_AWS_SSM_PARAMETER_NAME: !Ref SlackWebhookURLAWSSSMParameterName
      Code:
        S3Bucket: !Ref AWSAlertsLambdaCodeS3Bucket
        S3Key: !Ref AWSAlertsLambdaCodeS3ObjectKey
      Handler: aws_alerts_lambda_function.lambda_handler
      Role: !GetAtt AWSAlertsLambdaIAMRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Tags:
        - Key: Name
          Value: aws-alerts-lambda-function
  AlertsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - AWSAlertsLambdaFunction
      - AWSAlertsSNSTopic
    Properties:
      FunctionName: !GetAtt AWSAlertsLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: sns.amazonaws.com
      SourceArn: !Ref AWSAlertsSNSTopic
  AWSAlertsSNSTopicSubscription:
    Type: "AWS::SNS::Subscription"
    DependsOn:
      - AWSAlertsLambdaFunction
      - AWSAlertsSNSTopic
    Properties:
      TopicArn: !Ref AWSAlertsSNSTopic
      Endpoint: !GetAtt AWSAlertsLambdaFunction.Arn
      Protocol: lambda
  LambdaFailureCloudWatchAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateLambdaFailureResources
    Properties:
      AlarmName: aws-alerts-lambda-function-failure-alarm
      AlarmDescription: >-
        AWS CloudWatch Alarm to send alerts on AWS SNS regarding AWS Lambda function failures.
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions: []
      DatapointsToAlarm: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Period: 60
      EvaluationPeriods: 1
      AlarmActions:
        - !Ref AWSAlertsSNSTopic
  DMSInstanceFailureEvent:
    Type: "AWS::DMS::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateDMSFailureWarningResources
    Properties:
      SubscriptionName: dms-instance-failure-warning-event
      EventCategories:
        - failure
        - low storage
        - failover
        - deletion
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: replication-instance
      Tags:
        - Key: Name
          Value: dms-instance-failure-event
  DMSTaskFailureEvent:
    Type: "AWS::DMS::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateDMSFailureWarningResources
    Properties:
      SubscriptionName: dms-task-failure-event
      EventCategories:
        - failure
        - deletion
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: replication-task
      Tags:
        - Key: Name
          Value: dms-task-failure-event
  RDSInstanceFailureEvent:
    Type: "AWS::RDS::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRDSFailureWarningResources
    Properties:
      EventCategories:
        - failure
        - low storage
        - failover
        - availability
        - notification
        - read replica
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: db-instance
  RDSSecurityGroupFailureEvent:
    Type: "AWS::RDS::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRDSFailureWarningResources
    Properties:
      EventCategories:
        - failure
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: db-security-group
  RDSSnapshotFailureEvent:
    Type: "AWS::RDS::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRDSFailureWarningResources
    Properties:
      EventCategories:
        - notification
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: db-snapshot
  RDSClusterFailureEvent:
    Type: "AWS::RDS::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRDSFailureWarningResources
    Properties:
      EventCategories:
        - failure
        - failover
        - notification
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: db-cluster
  RedshiftClusterErrorEvent:
    Type: "AWS::Redshift::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRedshiftErrorResources
    Properties:
      Enabled: true
      Severity: ERROR
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: cluster
      SubscriptionName: aws-redshift-event-subscription-cluster-error-event
  RedshiftClusterParameterGroupErrorEvent:
    Type: "AWS::Redshift::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRedshiftErrorResources
    Properties:
      Enabled: true
      Severity: ERROR
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: cluster-parameter-group
      SubscriptionName: aws-redshift-event-subscription-cluster-parameter-group-error-event
  RedshiftClusterSecurityGroupErrorEvent:
    Type: "AWS::Redshift::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRedshiftErrorResources
    Properties:
      Enabled: true
      Severity: ERROR
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: cluster-security-group
      SubscriptionName: aws-redshift-event-subscription-cluster-security-group-error-event
  RedshiftClusterSnapshotErrorEvent:
    Type: "AWS::Redshift::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRedshiftErrorResources
    Properties:
      Enabled: true
      Severity: ERROR
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: cluster-snapshot
      SubscriptionName: aws-redshift-event-subscription-cluster-snapshot-error-event
  RedshiftScheduledActionErrorEvent:
    Type: "AWS::Redshift::EventSubscription"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateRedshiftErrorResources
    Properties:
      Enabled: true
      Severity: ERROR
      SnsTopicArn: !Ref AWSAlertsSNSTopic
      SourceType: scheduled-action
      SubscriptionName: aws-redshift-event-subscription-scheduled-action-error-event
  CBFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateCBFailureResources
    Properties:
      Name: aws-alerts-codebuild-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        CodeBuild failures.
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - FAILED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS CodeBuild"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  EC2AutoScalingFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateEC2AutoScalingFailureResources
    Properties:
      Name: aws-alerts-ec2-autoscaling-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS EC2
        Auto Scaling failures.
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance Launch Unsuccessful
          - EC2 Instance Terminate Unsuccessful
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS EC2 Auto Scaling"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  BatchFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateBatchFailureResources
    Properties:
      Name: aws-alerts-batch-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS Batch
        failures.
      EventPattern:
        source:
          - aws.batch
        detail-type:
          - Batch Job State Change
        detail:
          status:
            - FAILED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Batch"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  CodeDeployFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateCodeDeployFailureResources
    Properties:
      Name: aws-alerts-codedeploy-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        CodeDeploy failures.
      EventPattern:
        source:
          - aws.codedeploy
        detail-type:
          - CodeDeploy Deployment State-change Notification
          - CodeDeploy Instance State-change Notification
        detail:
          state:
            - FAILURE
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS CodeDeploy"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  CodePipelineFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateCodePipelineFailureResources
    Properties:
      Name: aws-alerts-codepipeline-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        CodePipeline failures.
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - CANCELED
            - FAILED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS CodePipeline"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  ConfigFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateConfigFailureResources
    Properties:
      Name: aws-alerts-config-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Config failures.
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Configuration Snapshot Delivery Status
        detail:
          messageType:
            - ConfigurationSnapshotDeliveryFailed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Config"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  EBSFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateEBSFailureResources
    Properties:
      Name: aws-alerts-ebs-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS EBS
        failures.
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EBS Snapshot Notification
          - EBS Multi-Volume Snapshots Completion Status
          - EBS Volume Notification
        detail:
          event:
            - createSnapshot
            - createSnapshots
            - copySnapshot
            - createVolume
            - attachVolume
            - modifyVolume
            - reattachVolume
          result:
            - failed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS EBS"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  GlueFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateGlueFailureResources
    Properties:
      Name: aws-alerts-glue-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS Glue
        failures.
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - Glue Crawler State Change
          - Glue Job State Change
        detail:
          state:
            - FAILED
            - TIMEOUT
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Glue"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  EMRFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateEMRFailureResources
    Properties:
      Name: aws-alerts-emr-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS EMR
        failures.
      EventPattern:
        source:
          - aws.emr
        detail-type:
          - EMR Instance Fleet State Change
          - EMR Auto Scaling Policy State Change
          - EMR Cluster State Change
          - EMR Step Status Change
        detail:
          state:
            - SUSPENDED
            - FAILED
            - TERMINATED
            - TERMINATED_WITH_ERRORS
            - CANCELLED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS EMR"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  EMRErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateEMRErrorResources
    Properties:
      Name: aws-alerts-emr-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS EMR
        Errors.
      EventPattern:
        source:
          - aws.emr
        detail-type:
          - EMR Configuration Error
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS EMR"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  ECSInstanceTerminationCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateECSInstanceTerminationResources
    Properties:
      Name: aws-alerts-ecs-instance-termination-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS ECS
        Instance Terminations.
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Container Instance State Change
        detail:
          status:
            - STOPPED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS ECS"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: TERMINATION"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  ECSTaskTerminationCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateECSTaskTerminationResources
    Properties:
      Name: aws-alerts-ecs-task-termination-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS ECS
        Task Terminations.
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          status:
            - STOPPED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS ECS"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: TERMINATION"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  EC2InstanceTerminationCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateEC2InstanceTerminationResources
    Properties:
      Name: aws-alerts-ec2-instance-termination-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS EC2
        Instance Terminations.
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - stopping
            - shutting-down
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS EC2"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: TERMINATION"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  EC2SpotInstanceErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateEC2SpotInstanceErrorResources
    Properties:
      Name: aws-alerts-ec2-spot-instance-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS EC2
        Spot Instance Errors.
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Spot Instance Interruption Warning
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS EC2"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  TrustedAdvisorErrorWarningCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateTrustedAdvisorErrorWarningResources
    Properties:
      Name: aws-alerts-trusted-advisor-error-warning-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Trusted Advisor Errors and Warnings.
      EventPattern:
        source:
          - aws.trustedadvisor
        detail-type:
          - Trusted Advisor Check Item Refresh Notification
        detail:
          status:
            - ERROR
            - WARN
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Trusted Advisor"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR or WARNING"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  HealthErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateHealthErrorResources
    Properties:
      Name: aws-alerts-health-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Health Errors.
      EventPattern:
        source:
          - aws.health
        detail-type:
          - AWS Health Event
          - AWS Health Abuse Event
        detail:
          eventTypeCategory:
            - issue
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Health"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SMSFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSMSFailureResources
    Properties:
      Name: aws-alerts-sms-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS SMS
        failures.
      EventPattern:
        source:
          - aws.sms
        detail-type:
          - Server Migration Job State Change
        detail:
          state:
            - Failed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Server Migration Service (SMS)"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  StepFunctionsFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateStepFunctionsFailureResources
    Properties:
      Name: aws-alerts-step-functions-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS Step
        Functions failures.
      EventPattern:
        source:
          - aws.states
        detail-type:
          - Step Functions Execution Status Change
        detail:
          status:
            - ABORTED
            - FAILED
            - TIMED_OUT
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Step Functions"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SSMMaintainanceWindowFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSSMMaintainanceWindowFailureResources
    Properties:
      Name: aws-alerts-ssm-maintainance-window-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS SSM
        Maintainance Window failures.
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Maintenance Window Execution State-change Notification
          - Maintenance Window Task Execution State-change Notification
          - Maintenance Window Task Target Invocation State-change Notification
        detail:
          status:
            - CANCELLED
            - FAILED
            - TIMED_OUT
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS SSM Maintainance Window"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SSMEC2FailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSSMEC2FailureResources
    Properties:
      Name: aws-alerts-ssm-ec2-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS SSM
        EC2 State Manager, Run Command and Automation failures.
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - EC2 State Manager Association State Change
          - EC2 State Manager Instance Association State Change
          - EC2 Command Status-change Notification
          - EC2 Command Invocation Status-change Notification
          - EC2 Automation Step Status-change Notification
          - EC2 Automation Execution Status-change Notification
        detail:
          status:
            - Failed
            - Cancelled
            - TimedOut
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS SSM EC2"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SSMComplianceWarningCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSSMComplianceWarningResources
    Properties:
      Name: aws-alerts-ssm-compliance-warning-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS SSM
        Compliance Warnings.
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Configuration Compliance State Change
        detail:
          compliance-status:
            - non_compliant
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS SSM Compliance"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: WARNING"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  OpsWorksFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateOpsWorksFailureResources
    Properties:
      Name: aws-alerts-opsworks-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        OpsWorks failures.
      EventPattern:
        source:
          - aws.opsworks
        detail-type:
          - OpsWorks Command State Change
          - OpsWorks Instance State Change
          - OpsWorks Deployment State Change
        detail:
          status:
            - expired
            - failed
            - skipped
            - connection_lost
            - setup_failed
            - shutting_down
            - start_failed
            - stop_failed
            - stopped
            - terminated
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS OpsWorks"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  OpsWorksErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateOpsWorksErrorResources
    Properties:
      Name: aws-alerts-opsworks-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        OpsWorks Errors.
      EventPattern:
        source:
          - aws.opsworks
        detail-type:
          - OpsWorks Alert
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS OpsWorks"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  KMSKeyExpirationWarningCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateKMSKeyExpirationWarningResources
    Properties:
      Name: aws-alerts-kms-key-expiration-warning-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS KMS
        Key Expiration Warnings.
      EventPattern:
        source:
          - aws.kms
        detail-type:
          - KMS Imported Key Material Expiration
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS KMS"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: WARNING"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  MacieWarningCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateMacieWarningResources
    Properties:
      Name: aws-alerts-macie-warning-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS Macie
        Warnings.
      EventPattern:
        source:
          - aws.macie
        detail-type:
          - Macie Alert
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Macie"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: WARNING"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  GameLiftFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateGameLiftFailureResources
    Properties:
      Name: aws-alerts-gamelift-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        GameLift failures.
      EventPattern:
        source:
          - aws.gamelift
        detail-type:
          - GameLift Matchmaking Event
        detail:
          type:
            - MatchmakingTimedOut
            - MatchmakingCancelled
            - MatchmakingFailed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS GameLift"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  TranscribeFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateTranscribeFailureResources
    Properties:
      Name: aws-alerts-transcribe-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Transcribe failures.
      EventPattern:
        source:
          - aws.transcribe
        detail-type:
          - Transcribe Job State Change
        detail:
          TranscriptionJobStatus:
            - FAILED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Transcribe"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SignerFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSignerFailureResources
    Properties:
      Name: aws-alerts-signer-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Signer failures.
      EventPattern:
        source:
          - aws.signer
        detail-type:
          - Signer Job Status Change
        detail:
          status:
            - Failed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Signer"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  DataSyncErrorWarningCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateDataSyncErrorWarningResources
    Properties:
      Name: aws-alerts-datasync-error-warning-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        DataSync Errors and Warnings.
      EventPattern:
        source:
          - aws.datasync
        detail-type:
          - DataSync Task Execution State Change
          - DataSync Task State Change
          - DataSync Agent State Change
        detail:
          State:
            - ERROR
            - UNAVAILABLE
            - OFFLINE
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS DataSync"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR or WARNING"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  IoTAnalyticsFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateIoTAnalyticsFailureResources
    Properties:
      Name: aws-alerts-iot-analytics-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS IoT
        Analytics failures.
      EventPattern:
        source:
          - aws.iotanalytics
        detail-type:
          - IoT Analytics Dataset Lifecycle Notification
        detail:
          state:
            - CONTENT_DELIVERY_FAILED
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS IoT Analytics"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  DataLifecycleManagerErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateDataLifecycleManagerErrorResources
    Properties:
      Name: aws-alerts-data-lifecycle-manager-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS Data
        Lifecycle Manager Errors.
      EventPattern:
        source:
          - aws.dlm
        detail-type:
          - DLM Policy State Change
        detail:
          state:
            - ERROR
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Data Lifecycle Manager"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  ElementalMediaPackageErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateElementalMediaPackageErrorResources
    Properties:
      Name: aws-alerts-elemental-mediapackage-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Elemental MediaPackage Errors.
      EventPattern:
        source:
          - aws.mediapackage
        detail-type:
          - MediaPackage Input Notification
          - MediaPackage Key Provider Notification
        detail:
          event:
            - MaxIngestStreamsError
            - IngestError
            - KeyProviderError
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Elemental MediaPackage"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  ElementalMediaLiveErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateElementalMediaLiveErrorResources
    Properties:
      Name: aws-alerts-elemental-medialive-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Elemental MediaLive Errors.
      EventPattern:
        source:
          - aws.medialive
        detail-type:
          - MediaLive Channel Alert
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Elemental MediaLive"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  ElementalMediaConvertErrorCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateElementalMediaConvertErrorResources
    Properties:
      Name: aws-alerts-elemental-mediaconvert-error-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        Elemental MediaConvert Errors.
      EventPattern:
        source:
          - aws.mediaconvert
        detail-type:
          - MediaConvert Job State Change
        detail:
          status:
            - ERROR
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS Elemental MediaConvert"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: ERROR"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SageMakerHyperParameterTuningFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSageMakerHyperParameterTuningFailureResources
    Properties:
      Name: aws-alerts-sagemaker-hyperparameter-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        SageMaker HyperParameter Tuning Job failures.
      EventPattern:
        source:
          - aws.sagemaker
        detail-type:
          - SageMaker HyperParameter Tuning Job State Change
        detail:
          HyperParameterTuningJobStatus:
            - Failed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS SageMaker HyperParameter Tuning"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SageMakerTransformFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSageMakerTransformFailureResources
    Properties:
      Name: aws-alerts-sagemaker-transform-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        SageMaker Transform Job failures.
      EventPattern:
        source:
          - aws.sagemaker
        detail-type:
          - SageMaker Transform Job State Change
        detail:
          TransformJobStatus:
            - Failed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS SageMaker Transform"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
  SageMakerTrainingFailureCloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - AWSAlertsSNSTopic
    Condition: CreateSageMakerTrainingFailureResources
    Properties:
      Name: aws-alerts-sagemaker-training-failure-cloudwatch-event
      Description: >-
        AWS CloudWatch Event to send alerts on AWS SNS regarding AWS
        SageMaker Training Job failures.
      EventPattern:
        source:
          - aws.sagemaker
        detail-type:
          - SageMaker Training Job State Change
        detail:
          TrainingJobStatus:
            - Failed
      State: ENABLED
      Targets:
        - Arn: !Ref AWSAlertsSNSTopic
          Id: AlertsSNSTopicTarget
          InputTransformer:
            InputPathsMap:
              detail: $.detail
              detail-type: $.detail-type
              resources: $.resources
              time: $.time
              region: $.region
              account: $.account
            InputTemplate: |-
              "AWS Event Account ID: <account>"
              "AWS Event Region: <region>"
              "AWS Event Time: <time>"
              "AWS Event Service: AWS SageMaker Training"
              "AWS Event Name: <detail-type>"
              "AWS Event Type: FAILURE"
              "AWS Event Resource(s): <resources>"
              "AWS Event Details (minified json string): <detail>"
